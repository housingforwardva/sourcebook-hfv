# Population {#population}

```{r}
#| label: setup

library(tidyverse)
library(tidycensus)
library(janitor)
library(shinylive)
library(webr)

```

The dashboards on this page include data on total population counts and components of population change. These trends help reveal how much, and for what reasons, population levels may be increasing or decreasing over time.

## Total Population

This dashboard shows annual population counts and percent changes from 2010 to 2022. Data for 2010 and 2020 are from those years' Decennial Census counts; all other years use estimates from the Census Bureau's Population Estimates Program (PEP).

```{shinylive-r}
#| standalone: true
#| echo: false

# This is a Shiny app that shows the total population
# of Virginia geographies from 2010 to 2022 based on 
# Census Population Estimates Program and the Decennial
# Census.

# Load necessary libraries.

library(shiny)
library(tidyverse)
library(ggplot2)
library(ggiraph)
library(ggtext)
library(glue)
library(hdatools)
library(scales)
library(rsconnect)
library(bslib)

# Load in data that has already been cleaned in R script.
total_pop <- readRDS("data/total_pop.rds")

# Create a list of all unique CBSAs and localities in Virginia based on the data.
cbsa_list <- sort(unique(total_pop$cbsa_title))
locality_list <- sort(unique(total_pop$name_long))

# Aggregate data to the CBSA-level for faster processing.
cbsa_pop <- total_pop |> 
  group_by(year, cbsa_title, counttype) |> 
  summarise(value = sum(value))

# Aggregate data to the state-lvel for faster processing.
state_pop <- total_pop |> 
  group_by(year, counttype) |> 
  summarise(value = sum(value))

# The server in a Shiny app is the "back-end." It is all the work that is being
# done behind the scenes to create the reactive visualization. This is done 
# based on input from a user that then leads to an output.

server <- function(input, output) {
  
  options(shiny.autoreload = TRUE)
  
  locality <- reactive({
    filter(total_pop, name_long == input$sel_locality)
  })
  
  cbsa <- reactive({
    filter(cbsa_pop, cbsa_title == input$sel_cbsa)
  })
  
  output$local_plot <- renderGirafe({
    
    gg <- ggplot(locality(),
                 aes(x = year,
                     y = value,
                     fill = counttype,
                     data_id = value,
                     tooltip = number_format(big.mark = ",")(value))) +
      geom_col(position = "dodge") +
      geom_col_interactive(position = "dodge") +
      # theme_hfv(base_size = 15) +
      # scale_fill_hfv() +
      labs(title = "Local population",
           subtitle = input$sel_locality,
           caption = "**Source:** U.S. Census Bureau, Population Estimates Program and Decennial Census.") +
      scale_y_continuous(labels = number_format(big.mark = ","))
    
    
    girafe(ggobj = gg, 
           width_svg = 7, 
           height_svg = 4,
    options = list(
      opts_tooltip(css = "background-color:white;color:black;font-family:Verdana;padding:5pt;"),
      opts_sizing(rescale = FALSE),
      opts_toolbar(pngname = input$sel_locality)))
})
  
  output$cbsa_plot <- renderGirafe({
    
    gg <- ggplot(cbsa(),
                 aes(x = year,
                     y = value,
                     fill = counttype,
                     data_id = value,
                     tooltip = number_format(big.mark = ",")(value))) +
      geom_col(position = "dodge") +
      geom_col_interactive(position = "dodge") +
      # theme_hfv(base_size = 15) +
      # scale_fill_hfv() +
      labs(title = "Core-based statistical area population",
           subtitle = input$sel_cbsa,
           caption = "**Source:** U.S. Census Bureau, Population Estimates Program and Decennial Census.") +
    scale_y_continuous(labels = number_format(big.mark = ","))
    
    girafe(ggobj = gg, 
           width_svg = 7, 
           height_svg = 4,
           options = list(
             opts_tooltip(css = "background-color:white;color:black;font-family:Verdana;padding:5pt;"),
             opts_sizing(rescale = FALSE),
             opts_toolbar(pngname = input$sel_cbsa)))
  })
  
  output$state_plot <- renderGirafe({
    
    gg <- ggplot(state_pop,
                 aes(x = year,
                     y = value,
                     fill = counttype,
                     data_id = value,
                     tooltip = number_format(big.mark = ",")(value))) +
      geom_col(position = "dodge") +
      geom_col_interactive(position = "dodge") +
      # theme_hfv(base_size = 15) +
      # scale_fill_hfv() +
      labs(title = "Virginia population",
           caption = "**Source:** U.S. Census Bureau, Population Estimates Program and Decennial Census.") +
      scale_y_continuous(labels = number_format(big.mark = ","))
    
    
    girafe(ggobj = gg, 
           width_svg = 7, 
           height_svg = 4,
           options = list(
             opts_tooltip(css = "background-color:white;color:black;font-family:Verdana;padding:5pt;"),
             opts_sizing(rescale = FALSE),
             opts_toolbar(pngname = "state_pop"))) 
  })
}

# The user interface (ui) is the front-facing side of the visualization. It includes 
# the input options, the output, and any other stylization for the visualization.
# 
  ui <- fluidPage(
    tags$head(
    tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css?family=FontName", type = "text/css"),
    tags$style(HTML("

      .selectize-input {
        font-size: 10pt;
      }
      
      .selectize-dropdown {
        font-size: 10pt;
      } 
      
      .centered-image-container {
          display: flex;
          justify-content: right;
          align-items: right;
      }

    "))),
    page_sidebar(mainPanel(
      tabsetPanel(type = "tabs", id = "tabselected", selected = 1,
        tabPanel("Statewide", girafeOutput("state_plot"), value =1),
        tabPanel("CBSA", girafeOutput("cbsa_plot"), value =2),
        tabPanel("Locality", girafeOutput("local_plot"), value =3)
      )
    ),
    sidebar = sidebar(
      position = "right",
      conditionalPanel(condition = "input.tabselected==2",
                       selectInput(
                         inputId = "sel_cbsa",
                         label = "Select a CBSA",
                         choices = cbsa_list
                       ),
                       style = "font-family: Open Sans;"
      ),
      conditionalPanel(condition = "input.tabselected==3",
        selectInput(
          inputId = "sel_locality",
          label = "Select a locality",
          choices = locality_list
        ),
        style = "font-family: Open Sans;"
      )
    ),
    hr(),
    div(class = "centered-image-container",
    img(src = "hfv_logo.png", width ="150px"))
  ))


# Run the application 
shinyApp(ui = ui, server = server)


```

```{=html}

<iframe id="example1" src="https://housingforwardva.shinyapps.io/total_pop/" style="border: none; width: 700px; height: 550px" frameborder="0"></iframe>

```



## Components of Population Change

This dashboard breaks down annual population changes by three different components:

-   Natural increases (births minus deaths),
-   Domestic migration (net moves from in/out of state), and
-   International migration (net moves from in/out of the country).

```{r}
#| label: change-data
#| eval: false


# Shiny Dashboard should show the changes over time utilizing a faceted bar chart for 2010 through 2022. Three different data viz should show data by state, CBSA, and locality. Filters are on the latter two, which allow you to switch to different geographies.

```



### Additional resources

**U.S. Census Bureau**

[*Virginia adds more than 600,000 people since 2010*](https://www.census.gov/library/stories/state-by-state/virginia-population-change-between-census-decade.html)

**UVA Weldon Cooper Center**

[*State population growth slows, with most new residents in Northern Virginia*](https://news.virginia.edu/content/state-population-growth-slows-most-new-residents-northern-virginia)

[*Comparing 2020 Virginia population projections to the Census count*](https://statchatva.org/2021/09/27/comparing-2020-virginia-population-projections-to-the-census-count/)

## Data sources

[Census Population Estimates Program](https://www.census.gov/programs-surveys/popest.html) (PEP)

Annual estimates of total population released by the U.S. Census Bureau. Available at locality level from 2010 to 2019. Estimates by age, race, and ethnicity also available, along with components of population change.

[2020 Decennial Census](https://www.census.gov/programs-surveys/decennial-census/about/rdo/summary-files.html)

Initial data from the 2020 Decennial Census is available in the PL 94-171 Redistricting summary file. As of February 2022, we use this data to append 2020 population counts onto the PEP time series data through 2019. Complete 2010 to 2020 Intercensal Estimates will be published in late 2022.
